#Autogenerated by sys2syz
include <wsconsio.h>
include <wseventvar.h>
include <wsdisplay_usl_io.h>

resource fd_wscons[fd]

syz_open_dev$WSCONS(dev ptr[in, string["/dev/wscons"]], id intptr, flags flags[open_flags]) fd_wscons

ioctl$WSDISPLAYIO_SSPLASH(fd fd_wscons, cmd const[WSDISPLAYIO_SSPLASH], arg int32)
ioctl$WSKBDIO_GETMODE(fd fd_wscons, cmd const[WSKBDIO_GETMODE], arg int32)
ioctl$WSDISPLAYIO_GCURSOR(fd fd_wscons, cmd const[WSDISPLAYIO_GCURSOR], arg ptr[inout, wsdisplay_cursor])
ioctl$WSKBDIO_GETKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_GETKEYREPEAT], arg ptr[in, wskbd_keyrepeat_data])
ioctl$WSDISPLAYIO_DSSCROLL(fd fd_wscons, cmd const[WSDISPLAYIO_DSSCROLL], arg ptr[out, wsdisplay_scroll_data])
ioctl$WSMOUSEIO_GTYPE(fd fd_wscons, cmd const[WSMOUSEIO_GTYPE], arg ptr[in, int32])
ioctl$WSDISPLAYIO_LDFONT(fd fd_wscons, cmd const[WSDISPLAYIO_LDFONT], arg ptr[out, wsdisplay_font])
ioctl$WSDISPLAYIO_GETPARAM(fd fd_wscons, cmd const[WSDISPLAYIO_GETPARAM], arg ptr[inout, wsdisplay_param])
ioctl$WSDISPLAYIO_GTYPE(fd fd_wscons, cmd const[WSDISPLAYIO_GTYPE], arg ptr[in, int32])
ioctl$WSMOUSEIO_SCALIBCOORDS(fd fd_wscons, cmd const[WSMOUSEIO_SCALIBCOORDS], arg ptr[out, wsmouse_calibcoords])
ioctl$WSDISPLAYIO_GETACTIVESCREEN(fd fd_wscons, cmd const[WSDISPLAYIO_GETACTIVESCREEN], arg int32)
ioctl$KDENABIO(fd fd_wscons, cmd const[KDENABIO])
ioctl$WSDISPLAYIO_SMSGATTRS(fd fd_wscons, cmd const[WSDISPLAYIO_SMSGATTRS], arg ptr[out, wsdisplay_msgattrs])
ioctl$WSDISPLAYIO_GETCMAP(fd fd_wscons, cmd const[WSDISPLAYIO_GETCMAP], arg ptr[out, wsdisplay_cmap])
ioctl$WSDISPLAYIO_SMODE(fd fd_wscons, cmd const[WSDISPLAYIO_SMODE], arg ptr[out, int32])
ioctl$WSDISPLAYIO_SVIDEO(fd fd_wscons, cmd const[WSDISPLAYIO_SVIDEO], arg ptr[out, int32])
ioctl$KDSETLED(fd fd_wscons, cmd const[KDSETLED])
ioctl$WSKBDIO_BELL(fd fd_wscons, cmd const[WSKBDIO_BELL])
ioctl$WSKBDIO_GETLEDS(fd fd_wscons, cmd const[WSKBDIO_GETLEDS], arg int32)
ioctl$WSMUXIO_OINJECTEVENT(fd fd_wscons, cmd const[WSMUXIO_OINJECTEVENT], arg ptr[out, owscons_event])
ioctl$KDSETMODE(fd fd_wscons, cmd const[KDSETMODE])
ioctl$WSKBDIO_SETLEDS(fd fd_wscons, cmd const[WSKBDIO_SETLEDS], arg int32)
ioctl$KDMKTONE(fd fd_wscons, cmd const[KDMKTONE])
ioctl$WSKBDIO_SETBELL(fd fd_wscons, cmd const[WSKBDIO_SETBELL], arg ptr[out, wskbd_bell_data])
ioctl$WSMUXIO_ADD_DEVICE(fd fd_wscons, cmd const[WSMUXIO_ADD_DEVICE], arg ptr[out, wsmux_device])
ioctl$WSDISPLAYIO_SBORDER(fd fd_wscons, cmd const[WSDISPLAYIO_SBORDER], arg int32)
ioctl$WSMOUSEIO_GETID(fd fd_wscons, cmd const[WSMOUSEIO_GETID], arg ptr[inout, wsmouse_id])
ioctl$WSMUXIO_LIST_DEVICES(fd fd_wscons, cmd const[WSMUXIO_LIST_DEVICES], arg ptr[inout, wsmux_device_list])
ioctl$WSKBDIO_SETSCROLL(fd fd_wscons, cmd const[WSKBDIO_SETSCROLL], arg ptr[out, wskbd_scroll_data])
ioctl$WSMOUSEIO_SETVERSION(fd fd_wscons, cmd const[WSMOUSEIO_SETVERSION], arg int32)
ioctl$WSKBDIO_GETBELL(fd fd_wscons, cmd const[WSKBDIO_GETBELL], arg ptr[in, wskbd_bell_data])
ioctl$WSDISPLAYIO_PUTCMAP(fd fd_wscons, cmd const[WSDISPLAYIO_PUTCMAP], arg ptr[out, wsdisplay_cmap])
ioctl$WSDISPLAYIO_SETVERSION(fd fd_wscons, cmd const[WSDISPLAYIO_SETVERSION], arg int32)
ioctl$WSDISPLAYIO_GCURPOS(fd fd_wscons, cmd const[WSDISPLAYIO_GCURPOS], arg ptr[in, wsdisplay_curpos])
ioctl$WSDISPLAYIO_SCURSOR(fd fd_wscons, cmd const[WSDISPLAYIO_SCURSOR], arg ptr[out, wsdisplay_cursor])
ioctl$KDSETRAD(fd fd_wscons, cmd const[KDSETRAD])
ioctl$KDGKBMODE(fd fd_wscons, cmd const[KDGKBMODE], arg int32)
ioctl$WSKBDIO_COMPLEXBELL(fd fd_wscons, cmd const[WSKBDIO_COMPLEXBELL], arg ptr[out, wskbd_bell_data])
ioctl$WSKBDIO_SETKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_SETKEYREPEAT], arg ptr[out, wskbd_keyrepeat_data])
ioctl$WSKBDIO_SETENCODING(fd fd_wscons, cmd const[WSKBDIO_SETENCODING], arg ptr[out, int32])
ioctl$WSDISPLAYIO_DOBLIT(fd fd_wscons, cmd const[WSDISPLAYIO_DOBLIT], arg ptr[inout, wsdisplayio_blit])
ioctl$WSDISPLAYIO_SETPARAM(fd fd_wscons, cmd const[WSDISPLAYIO_SETPARAM], arg ptr[inout, wsdisplay_param])
ioctl$WSKBDIO_SETDEFAULTKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_SETDEFAULTKEYREPEAT], arg ptr[out, wskbd_keyrepeat_data])
ioctl$WSMUXIO_INJECTEVENT(fd fd_wscons, cmd const[WSMUXIO_INJECTEVENT], arg ptr[out, wscons_event])
ioctl$CONS_GETVERS(fd fd_wscons, cmd const[CONS_GETVERS], arg int32)
ioctl$WSMOUSEIO_GCALIBCOORDS(fd fd_wscons, cmd const[WSMOUSEIO_GCALIBCOORDS], arg ptr[in, wsmouse_calibcoords])
ioctl$WSDISPLAYIO_GET_EDID(fd fd_wscons, cmd const[WSDISPLAYIO_GET_EDID], arg ptr[inout, wsdisplayio_edid_info])
ioctl$WSMUXIO_REMOVE_DEVICE(fd fd_wscons, cmd const[WSMUXIO_REMOVE_DEVICE], arg ptr[out, wsmux_device])
ioctl$WSDISPLAYIO_ADDSCREEN(fd fd_wscons, cmd const[WSDISPLAYIO_ADDSCREEN], arg ptr[out, wsdisplay_addscreendata])
ioctl$WSDISPLAYIO_GCURMAX(fd fd_wscons, cmd const[WSDISPLAYIO_GCURMAX], arg ptr[in, wsdisplay_curpos])
ioctl$VT_GETACTIVE(fd fd_wscons, cmd const[VT_GETACTIVE], arg int32)
ioctl$WSKBDIO_GETMAP(fd fd_wscons, cmd const[WSKBDIO_GETMAP], arg ptr[inout, wskbd_map_data])
ioctl$VT_OPENQRY(fd fd_wscons, cmd const[VT_OPENQRY], arg int32)
ioctl$WSKBDIO_SETMAP(fd fd_wscons, cmd const[WSKBDIO_SETMAP], arg ptr[out, wskbd_map_data])
ioctl$WSDISPLAYIO_SPROGRESS(fd fd_wscons, cmd const[WSDISPLAYIO_SPROGRESS], arg int32)
ioctl$WSKBDIO_GTYPE(fd fd_wscons, cmd const[WSKBDIO_GTYPE], arg ptr[in, int32])
ioctl$KDGETLED(fd fd_wscons, cmd const[KDGETLED], arg int32)
ioctl$WSMOUSEIO_GETREPEAT(fd fd_wscons, cmd const[WSMOUSEIO_GETREPEAT], arg ptr[in, wsmouse_repeat])
ioctl$WSDISPLAYIO_GMSGATTRS(fd fd_wscons, cmd const[WSDISPLAYIO_GMSGATTRS], arg ptr[in, wsdisplay_msgattrs])
ioctl$WSKBDIO_GETDEFAULTKEYREPEAT(fd fd_wscons, cmd const[WSKBDIO_GETDEFAULTKEYREPEAT], arg ptr[in, wskbd_keyrepeat_data])
ioctl$WSKBDIO_GETSCROLL(fd fd_wscons, cmd const[WSKBDIO_GETSCROLL], arg ptr[in, wskbd_scroll_data])
ioctl$WSDISPLAYIO_GET_FBINFO(fd fd_wscons, cmd const[WSDISPLAYIO_GET_FBINFO], arg ptr[inout, wsdisplayio_fbinfo])
ioctl$KDDISABIO(fd fd_wscons, cmd const[KDDISABIO])
ioctl$WSDISPLAYIO_SET_POLLING(fd fd_wscons, cmd const[WSDISPLAYIO_SET_POLLING], arg int32)
ioctl$WSDISPLAYIO_GET_BUSID(fd fd_wscons, cmd const[WSDISPLAYIO_GET_BUSID], arg ptr[in, wsdisplayio_bus_id])
ioctl$WSKBDIO_SETVERSION(fd fd_wscons, cmd const[WSKBDIO_SETVERSION], arg int32)
ioctl$WSDISPLAYIO_SCURPOS(fd fd_wscons, cmd const[WSDISPLAYIO_SCURPOS], arg ptr[out, wsdisplay_curpos])
ioctl$WSKBDIO_SETMODE(fd fd_wscons, cmd const[WSKBDIO_SETMODE], arg int32)
ioctl$WSKBDIO_GETKEYCLICK(fd fd_wscons, cmd const[WSKBDIO_GETKEYCLICK], arg int32)
ioctl$WSDISPLAYIO_DGSCROLL(fd fd_wscons, cmd const[WSDISPLAYIO_DGSCROLL], arg ptr[in, wsdisplay_scroll_data])
ioctl$WSDISPLAYIO_GVIDEO(fd fd_wscons, cmd const[WSDISPLAYIO_GVIDEO], arg ptr[in, int32])
ioctl$KDSKBMODE(fd fd_wscons, cmd const[KDSKBMODE])
ioctl$WSDISPLAYIO_GMODE(fd fd_wscons, cmd const[WSDISPLAYIO_GMODE], arg ptr[in, int32])
ioctl$WSDISPLAYIO_GINFO(fd fd_wscons, cmd const[WSDISPLAYIO_GINFO], arg ptr[in, wsdisplay_fbinfo])
ioctl$WSMOUSEIO_SRATE(fd fd_wscons, cmd const[WSMOUSEIO_SRATE], arg ptr[out, int32])
ioctl$WSKBDIO_SETKEYCLICK(fd fd_wscons, cmd const[WSKBDIO_SETKEYCLICK], arg int32)
ioctl$VT_WAITACTIVE(fd fd_wscons, cmd const[VT_WAITACTIVE])
ioctl$KDGKBTYPE(fd fd_wscons, cmd const[KDGKBTYPE], arg int8)
ioctl$WSDISPLAYIO_LINEBYTES(fd fd_wscons, cmd const[WSDISPLAYIO_LINEBYTES], arg ptr[in, int32])
ioctl$VT_ACTIVATE(fd fd_wscons, cmd const[VT_ACTIVATE])
ioctl$_O_WSDISPLAYIO_SETKEYBOARD(fd fd_wscons, cmd const[_O_WSDISPLAYIO_SETKEYBOARD], arg ptr[inout, wsdisplay_kbddata])
ioctl$WSMOUSEIO_SETREPEAT(fd fd_wscons, cmd const[WSMOUSEIO_SETREPEAT], arg ptr[out, wsmouse_repeat])
ioctl$WSKBDIO_GETENCODING(fd fd_wscons, cmd const[WSKBDIO_GETENCODING], arg ptr[in, int32])
ioctl$WSDISPLAYIO_SFONT(fd fd_wscons, cmd const[WSDISPLAYIO_SFONT], arg ptr[out, wsdisplay_usefontdata])
ioctl$WSKBDIO_GETDEFAULTBELL(fd fd_wscons, cmd const[WSKBDIO_GETDEFAULTBELL], arg ptr[in, wskbd_bell_data])
ioctl$WSDISPLAYIO_WAITBLIT(fd fd_wscons, cmd const[WSDISPLAYIO_WAITBLIT], arg ptr[inout, wsdisplayio_blit])
ioctl$WSDISPLAYIO_GETWSCHAR(fd fd_wscons, cmd const[WSDISPLAYIO_GETWSCHAR], arg ptr[inout, wsdisplay_char])
ioctl$WSMOUSEIO_SRES(fd fd_wscons, cmd const[WSMOUSEIO_SRES], arg ptr[out, int32])
ioctl$WSKBDIO_SETDEFAULTBELL(fd fd_wscons, cmd const[WSKBDIO_SETDEFAULTBELL], arg ptr[out, wskbd_bell_data])
ioctl$WSDISPLAYIO_PUTWSCHAR(fd fd_wscons, cmd const[WSDISPLAYIO_PUTWSCHAR], arg ptr[inout, wsdisplay_char])
ioctl$WSDISPLAYIO_GBORDER(fd fd_wscons, cmd const[WSDISPLAYIO_GBORDER], arg int32)
ioctl$VT_RELDISP(fd fd_wscons, cmd const[VT_RELDISP])
ioctl$WSDISPLAYIO_DELSCREEN(fd fd_wscons, cmd const[WSDISPLAYIO_DELSCREEN], arg ptr[out, wsdisplay_delscreendata])

wsmouse_calibcoord {
y	int32
x	int32
rawx	int32
rawy	int32
}

wskbd_scroll_data {
modifier	int32
mode	int32
which	int32
}

wskbd_bell_data {
volume	int32
period	int32
which	int32
pitch	int32
}

timespec {
tv_sec	intptr
tv_nsec	intptr
}

wsmouse_id {
data	array[int8, 256]
length	int32
type	int32
}

wscons_keymap {
group1	array[int16, 2]
command	int16
group2	array[int16, 2]
}

wsdisplay_char {
foreground	int8
letter	int16
flags	int8
background	int8
col	int32
row	int32
}

wsdisplay_fbinfo {
width	int32
depth	int32
cmsize	int32
height	int32
}

wsdisplay_usefontdata {
name	buffer[out]
}

_fbi_subtype [
fbi_rgbmasks	_fbi_rgbmasks
fbi_cmapinfo	_fbi_cmapinfo
]

wscons_event {
type	int32
value	int32
time	timespec
}

wsmux_device_list {
devices	array[wsmux_device, 32]
ndevices	int32
}

wsdisplayio_fbinfo {
fbi_width	int32
fbi_pixeltype	int32
fbi_fboffset	intptr
fbi_flags	int32
fbi_subtype	_fbi_subtype
fbi_fbsize	intptr
fbi_stride	int32
fbi_bitsperpixel	int32
fbi_height	int32
}

wsdisplay_curpos {
y	int32
x	int32
}

wsdisplay_kbddata {
idx	int32
op	int32
}

timespec50 {
tv_sec	int32
tv_nsec	intptr
}

bus_data [
sbus	bus_sbus
pci	bus_pci
pad	array[int8, 32]
]

wsdisplay_font {
fontheight	int32
name	buffer[out]
encoding	int32
bitorder	int32
stride	int32
numchars	int32
fontwidth	int32
byteorder	int32
data	buffer[out]
firstchar	int32
}

wskbd_map_data {
maplen	len[map, int32]
map	ptr[inout, wscons_keymap]
}

wsdisplay_cursor {
enable	int32
image	ptr[inout, int8]
mask	ptr[inout, int8]
pos	wsdisplay_curpos
hot	wsdisplay_curpos
cmap	wsdisplay_cmap
which	int32
size	wsdisplay_curpos
}

wsdisplay_msgattrs {
kernel_attrs	int32
kernel_fg	int32
default_attrs	int32
default_bg	int32
kernel_bg	int32
default_fg	int32
}

wsmux_device {
type	int32
idx	int32
}

wsdisplayio_blit {
dsty	int32
dstx	int32
height	int32
width	int32
pen	int32
serial	int32
srcy	int32
srcx	int32
op	int32
}

wsdisplay_addscreendata {
emul	buffer[out]
screentype	buffer[out]
idx	int32
}

bus_sbus {
fb_instance	int32
}

wsdisplayio_bus_id {
bus_type	int32
ubus	bus_data
}

_fbi_cmapinfo {
cmap_entries	int32
}

wsmouse_calibcoords {
maxx	int32
maxy	int32
samplelen	len[samples, int32]
minx	int32
miny	int32
samples	array[wsmouse_calibcoord, 16]
}

bus_pci {
device	int32
bus	int32
domain	int32
function	int32
}

owscons_event {
type	int32
value	int32
time	timespec50
}

wsdisplayio_edid_info {
buffer_size	int32
edid_data	buffer[inout]
data_size	int32
}

wsdisplay_param {
max	int32
reserved	array[int32, 4]
curval	int32
param	int32
min	int32
}

wsdisplay_cmap {
count	int32
index	int32
blue	ptr[out, int8]
green	ptr[out, int8]
red	ptr[out, int8]
}

wskbd_keyrepeat_data {
del1	int32
which	int32
delN	int32
}

wsdisplay_delscreendata {
flags	int32
idx	int32
}

wsdisplay_scroll_data {
fastlines	int32
which	int32
slowlines	int32
}

wsmouse_repeat {
wr_delay_minimum	int32
wr_delay_decrement	int32
wr_delay_first	int32
wr_buttons	intptr
}

_fbi_rgbmasks {
red_offset	int32
green_offset	int32
red_size	int32
blue_size	int32
green_size	int32
alpha_offset	int32
blue_offset	int32
alpha_size	int32
}

